# The purpose of this is is to validate preprocess.py npy files.
# Open the file, verify there are non nan values

"""
This script validates the .npy files generated by preprocess.py by checking for the presence of NaN values.

Usage:
    python validate.py --path PATH [--parallel]

Arguments:
    --path: The path to the .npy file or folder containing .npy files to validate.
    --parallel: Process files in parallel.

Example:
    python validate.py --path data/npy_sessions --parallel
    python validate.py --path data/npy_sessions/sample.npy
"""

import argparse
import numpy as np

import os
from multiprocessing import Pool

def validate_file(file_path: str):
    data = np.load(file_path)
    if np.isnan(data).any():
        os.remove(file_path)
        print(f"File {file_path} contains nan values and has been deleted.")

def validate_folder(folder_path: str, parallel: bool):
    file_paths = []
    for root, _, files in os.walk(folder_path):
        for file in files:
            if file.endswith('.npy'):
                file_paths.append(os.path.join(root, file))
    
    if parallel:
        with Pool() as pool:
            pool.map(validate_file, file_paths)
    else:
        for file_path in file_paths:
            validate_file(file_path)

def main():
    parser = argparse.ArgumentParser(description="Validate preprocess.py npy files.")
    parser.add_argument("--path", type=str, required=True, help="Path to the npy file or folder to validate")
    parser.add_argument("--parallel", action="store_true", help="Process files in parallel")
    args = parser.parse_args()

    if os.path.isfile(args.path):
        validate_file(args.path)
    elif os.path.isdir(args.path):
        validate_folder(args.path, args.parallel)
    else:
        print(f"Path {args.path} is not a valid file or directory.")
    

if __name__ == "__main__":
    main()
